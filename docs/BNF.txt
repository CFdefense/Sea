// A complete program consists of zero or more complex objects followed by EOF
Program ::= ComplexObjectList $  

// A list of complex objects, or empty
ComplexObjectList ::= ComplexObject ComplexObjectList 
                    | ε  

// A complex object can be a function, enum, struct, or const
ComplexObject ::= Function 
                | Enum 
                | Struct 
                | Const

// A function may have zero or more decorators, a name, parameter list,
// optional return type, and a block of statements
Function ::= {Decorator} fn Id ( ParamList ) [ "->" Type ] Block  

// A decorator begins with '@' followed by an identifier
Decorator ::= @Id  

// A parameter list can be empty, a single parameter, or multiple parameters
ParamList ::= Param , ParamList 
            | Param 
            | ε  

// A parameter has a name and a type
Param ::= Id : Type  

// A block is a scope enclosed in braces and contains zero or more statements
Block ::= { StatementList }  

// A list of statements or empty
StatementList ::= Statement StatementList 
                | ε  

// A statement can be a print statement, assignment, variable declaration,
// loop, conditional, nested block, or expression statement
Statement ::= PrintStatement 
            | AssignmentStatement 
            | VarDecl 
            | WhileStatement 
            | IfStatement 
            | Block 
            | Expr ;  

// Print statement outputs the result of an expression
PrintStatement ::= print ( Expr )  

// Assignment gives a value to an identifier
AssignmentStatement ::= Id = Expr ;  

// Variable declaration defines a typed variable
VarDecl ::= type Id ;  

// While loop with a condition and a code block
WhileStatement ::= while BooleanExpr Block  

// If statement with a condition and a code block
IfStatement ::= if BooleanExpr Block  

// An enum defines a set of named values
Enum ::= enum Id { EnumVariants }  

// Enum variants can be a comma-separated list of identifiers or empty
EnumVariants ::= Id , EnumVariants 
               | Id 
               | ε  

// A struct defines a group of typed fields
Struct ::= struct Id { StructFields }  

// A struct field list can be multiple fields or empty
StructFields ::= Field ; StructFields 
               | ε  

// A struct field consists of a type and an identifier
Field ::= Type Id  

// A const defines a named, immutable value of a given type
Const ::= const Id : Type = Expr ;  

// An expression can be an integer expression, string, boolean, variable, or function call
Expr ::= IntExpr 
       | StringExpr 
       | BooleanExpr 
       | Id 
       | FnCallExpr  

// An integer expression can be a digit or digit followed by an operator and another expression
IntExpr ::= digit intop Expr 
         | digit  

// A string expression is a quoted list of characters
StringExpr ::= " CharList "  

// A boolean expression is a binary comparison or literal
BooleanExpr ::= ( Expr boolop Expr ) 
              | boolval  

// A function call expression has a name and an argument list
FnCallExpr ::= Id ( ArgList )  

// An argument list can be empty, a single expression, or multiple expressions
ArgList ::= Expr , ArgList 
         | Expr 
         | ε  

// An identifier is a single character a–z
Id ::= char  

// A list of characters, spaces, or empty — used in string expressions
CharList ::= char CharList 
           | space CharList 
           | ε  

// A type is one of the basic types or a user-defined type name
Type ::= int | string | boolean | Id  

// Digits 0 through 9
digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9  

// Lowercase letters a through z
char ::= a | b | c ... z  

// The space character
space ::= " "  

// Boolean operators for equality/inequality
boolop ::= == | !=  

// Boolean literals
boolval ::= true | false  

// Integer operator (only '+' for now)
intop ::= +  
